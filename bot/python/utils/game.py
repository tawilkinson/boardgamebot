import logging
import requests
import time
import string
from bs4 import BeautifulSoup

logger = logging.getLogger("discord")


class Webpage(BeautifulSoup):
    """
    Creates a BeautifulSoup object of a webpages's HTML.
    """

    def __init__(self, url, xml=False):
        try:
            self.response = requests.get(url)
            self.page_response = self.response
            if xml:
                self.page_html = BeautifulSoup(
                    self.response.text, features="xml")
            else:
                self.page_html = BeautifulSoup(
                    self.response.text, "html.parser")
            self.error = None
        except requests.exceptions.SSLError:
            self.page_response = None
            self.page_html = None
            self.error = "SSL Error"
        except requests.exceptions.HTTPError:
            self.page_response = None
            self.page_html = None
            self.error = "HTTP Error"
        except requests.exceptions.ConnectionError:
            self.page_response = None
            self.page_html = None
            self.error = "Timed Out"


class Game:
    """
    When a new Game class is created, site-specific urls are autogenerated for boardgamearena.com, boardgamegeek.com,
    boiteajeux.net, tabletopia.com, steamcommunity.com (for table top simulator games) and yucata.de.
    Class methods exist to update the Game the attribuites that are initialised as 'False' with data.
    Class method `return_game_data` formats the Game data as a dictionary.
    """

    def __init__(self, name):
        self.name = string.capwords(name)
        self.search_name = self.name.lower().replace(" ", "%20")
        self.search_name_alpha_num = "".join(
            [x for x in self.name.lower() if x.isalpha()]
        )
        self.app = ""
        self.bga = False
        self.bga_search_url = (
            f"https://en.boardgamearena.com/gamepanel?game={self.search_name_alpha_num}"
        )
        self.bga_non_exact_search_url = (
            f"https://en.boardgamearena.com/gamelist?section=all"
        )
        self.bgg = ""
        self.bgg_search_url = f"http://www.boardgamegeek.com/xmlapi2/search?query={self.search_name}&exact=1&type=boardgame"
        self.bgg_non_exact_search_url = f"http://www.boardgamegeek.com/xmlapi2/search?query={self.search_name}&type=boardgame"
        self.boite = False
        self.boite_search_url = "http://www.boiteajeux.net/index.php?p=regles"
        self.description = False
        self.image = ""
        self.tabletopia = ""
        self.tabletopia_search_url = f"https://tabletopia.com/playground/playgroundsearch/search?timestamp={int(time.time() * 1000)}&query={self.search_name}"
        self.tts = False
        self.tts_dlc_url = "https://store.steampowered.com/search/?term=tabletop+simulator&category1=21"
        self.tts_search_url = f'https://steamcommunity.com/workshop/browse/?appid=286160&searchtext="{self.name}"&browsesort=textsearch&section=readytouseitems&requiredtags%5B0%5D=Game&actualsort=textsearch&p=1'
        self.yucata = False
        self.yucata_search_url = "https://www.yucata.de/en/"

    def update_name(self, new_name):
        self.name = string.capwords(new_name)
        self.search_name = self.name.lower().replace(" ", "%20")
        self.search_name_alpha_num = "".join(
            [x for x in self.name.lower() if x.isalpha()]
        )

    def set_description(self, description):
        self.description = description

    def set_image(self, description):
        self.image = description

    def set_bga_url(self, url):
        self.bga = url

    def set_boite_url(self, url):
        self.boite = url

    def set_tabletopia_url(self, url):
        self.tabletopia = url

    def set_tts_url(self, tts):
        self.tts = tts

    def set_yucata_url(self, url):
        self.yucata = url

    def get_set_bgg_url(self, game_id):
        self.bgg = f"https://boardgamegeek.com/boardgame/{game_id}/"
        return f"http://www.boardgamegeek.com/xmlapi2/thing?id={game_id}"

    def return_game_data(self):
        return dict(
            name=self.name,
            description=self.description,
            bgg=self.bgg,
            image=self.image,
            tabletopia=self.tabletopia,
            tts=self.tts,
            bga=self.bga,
            yucata=self.yucata,
            boite=self.boite,
            app=self.app,
        )
